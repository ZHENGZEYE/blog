<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper
        PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.zeye.blog.mapper.FriendLinkMapper">

        <resultMap id="friendLink" type="com.zeye.blog.pojo.FriendLink">
                <!--在映射规则时，主键是不可以省略的，不管名称一不一致-->
                <id column="id" property="id"></id>
                <result column="create_time" property="createTime"></result>
        </resultMap>

        <!--id属性：表示映射的接口中方法的名字，直接在标签的内部来编写SQL语句
       useGeneratedKeys属性:开启某个字段的值自增（主键设置为递增）
       keyProperty属性: 告诉我谁的主键自增，标签讲表中的哪个字段作为主键进行递增（）
        -->
        <insert id="saveFriendLink" useGeneratedKeys="true" keyProperty="id">
            insert into t_friend (blogaddress, blogname, create_time, pictureaddress)
            values (#{blogaddress},#{blogname},#{createTime},#{pictureaddress})
        </insert>

        <!--select语句在执行的时候，查询的结构是一个对象，多个对象
       resultType:表示查询的结果集类型，只需要指定对应映射类的类型，并且包含完整的包的接口（前提：User实体类字段名和数据库名字一至）
       resultMap: 标签表示当表的资源和类的对象属性的字段名称不一致时，来自定义查询结果的映射规则 -->
        <select id="getAllFriendLink" resultMap="friendLink">
            select * from t_friend
        </select>

        <select id="getFriendLinkByBlogAddress" resultMap="friendLink">
            select * from t_friend where blogaddress = #{blogaddress}
        </select>

        <select id="getFriendById" resultMap="friendLink">
            select * from t_friend where  id = #{id}
        </select>


        <update id="updateFriendLink" parameterType="com.zeye.blog.pojo.FriendLink">
            update t_friend
            set blogname = #{blogname},blogaddress = #{blogaddress} , pictureaddress = #{pictureaddress}
            where id = #{id}
        </update>

        <delete id="deleteFriendLink" >
            delete from t_friend where id = #{id}
        </delete>

</mapper>